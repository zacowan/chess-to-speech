"""Helper functions for api_routes to use.

"""

from .state_manager import get_fulfillment_params, get_game_state
from .intent_processing import error_fulfillment, utils, possible_actions


TTS_ERROR_AUDIO_FILENAME = "./static_audio/tts-error.wav"


def get_help_response(help_type):
    if help_type == "FALLBACK":
        # Tell the user what the possible moves are
        prefix = "If you're wondering what I can do, "
        text_response = utils.get_random_choice(
            possible_actions.HAPPY_PATH_RESPONSES)
        return prefix + text_response
    elif help_type == "TIMEOUT":
        # Tell the user that they can ask what their best move is
        prefix = "If you'd like some help, "
        text_response = utils.get_random_choice([
            "I can tell you what your best move would be. Just let me know.",
            "I could give you your best possible move. Just let me know."
        ])
        return prefix + text_response
    else:
        # Default: tell the user what the possible moves are
        prefix = "If you're wondering what to do, "
        text_response = utils.get_random_choice(
            possible_actions.HAPPY_PATH_RESPONSES)
        return prefix + text_response


def get_static_error_audio():
    """Returns the data of a static audio file for TTS errors.

    Returns:
        bytes: the raw bytes of the audio file.

    """
    # Read the audio file
    data = None
    with open(TTS_ERROR_AUDIO_FILENAME, "rb") as f:
        data = f.read()

    return data


def get_response_error_return(session_id, board_str):
    """Returns a generic error response.

    Args:
        board_str: FEN representation of board from client.

    Returns:
        A dictionary that should be returned for the get-response route using jsonify().

        {
            'response_text': str,
            'board_str': str
            'fulfillment_info': dict
        }

        response_text (str): the response generated by Andy, as text.
        fulfillment_info (dict): the intent information detected from the user
            and the game state.

            {
                'intent_name': str,
                'success': boolean
            }

            intent_name (str): the name of the detected intent (always ERROR).
            success (boolean): always False for an error.
        board_str (str): the state of the board, as a FEN string.

    """
    # Get error fulfillment information
    response_text, fulfillment_info = error_fulfillment.get_error_fulfillment()

    return {
        "response_text": response_text,
        "fulfillment_info": fulfillment_info,
        'fulfillment_params': get_fulfillment_params(session_id),
        "board_str": board_str,
        'game_state': get_game_state(session_id)
    }
